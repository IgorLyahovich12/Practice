У Java вибір структури даних залежить від вимог до продуктивності, впорядкованості та унікальності елементів. Давайте розберемо всіх із них.

Списки (List)
Використовуються, коли важливий порядок елементів та можливість дублювання.

ArrayList – швидкий доступ за індексом (O(1)), але повільна вставка/видалення в середньому списку (O(n)). Краще для випадків, коли частіше потрібно читати, ніж модифікувати.
LinkedList – уповільнений доступ за індексом (O(n)), але швидка вставка/видалення на початку та середині списку (O(1) за наявності посилань). Використовується, коли важливі частини операції додавання/видалення.
Карти (Map)
Використовуються, коли потрібний швидкий доступ до значень ключа.

HashMap – не забезпечує порядок, але забезпечує O(1) для пошуку, вставки та видалення. Оптимально для швидкого пошуку ключем.
TreeMap – зберігає ключі у відсортованому порядку, але операції виконуються за O(log n). Використовується, коли ключі порядку потрібні.
LinkedHashMap – зберегти порядок вставки елементів, але, як і раніше, аналогічний HashMap. Корисно, коли потрібний порядок вставки.
Hashtable – відкритий варіант HashMap, але потокобезпечний (синхронізований). Найкраще використовувати ConcurrentHashMap.
Безліч (Set)
Використовуються, коли важлива унікальність елементів.

HashSet– не зберігає порядок, але забезпечує O(1) елементів для операцій додавання/видалення/пошуку. Пристрій швидкого зберігання унікальних зразків.
TreeSet – зберігає елементи у відсортованому порядку (O(log n) на операції). Використовується, коли важливий порядок.
LinkedHashSet - зберегти порядок вставки, але повільніше HashSet.
Коли використати що?
Швидкий пошук за ключем? →HashMap
Відсортовані ключі? →TreeMap
Збереження порядку вставок (ключ-значення)? →LinkedHashMap
Унікальні значення без ладу? →HashSet
Унікальні значення з порядком? →TreeSet
Список зі швидким доступом за індексом? →ArrayList
Список із частими видаленнями/додаваннями? →LinkedList
Queue
Deque
Priorety Queue