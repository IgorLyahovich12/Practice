package my.project.exercise;
/*
–ó–∞–≤–¥–∞–Ω–Ω—è: –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–ª–æ–≤–∞ —É —Å–ø–∏—Å–∫—É —Ä–µ—á–µ–Ω—å
üìå –ú–µ—Ç–∞: –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Set, Stream API, —Ç–∞ –ª—è–º–±–¥–∞-–≤–∏—Ä–∞–∑–∏.

üîπ –û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è:
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Ä–µ—á–µ–Ω–Ω—è .
–ü—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞:
–†–æ–∑–¥—ñ–ª–∏—Ç–∏ –≤—Å—ñ —Ä–µ—á–µ–Ω–Ω—è –Ω–∞ –æ–∫—Ä–µ–º—ñ —Å–ª–æ–≤–∞.
–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ —Å–ª–æ–≤–∞ (–∑–∞–ª–∏—à–∏—Ç–∏ –ª–∏—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ).
–í—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —ó—Ö —É –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É.
–í–∏–≤–µ—Å—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–ª–æ–≤–∞ —É –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ.
*/

import java.util.*;
import java.util.stream.*;

public class UniqueWords {
    public static void main(String[] args) {
        UniqueWords uniqueWords = new UniqueWords();
        String text = uniqueWords.inputText(); // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        Set<String> wordsSet = uniqueWords.createTreeSet(text); // –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–∫—Å—Ç
        System.out.println("–£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–ª–æ–≤–∞ —É –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É: " + wordsSet);
    }

    public String inputText() {
        Scanner sc = new Scanner(System.in);
        StringBuilder text = new StringBuilder();
        System.out.println("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è):");
        while (true) {
            String line = sc.nextLine();
            if (line.isEmpty()) break; // –Ø–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫, –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è
            text.append(line).append(" ");
        }
        return text.toString().trim(); // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    }

    public Set<String> createTreeSet(String text) {
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Set –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Stream API —Ç–∞ –ª—è–º–±–¥–∞-–≤–∏—Ä–∞–∑—ñ–≤
        return Arrays.stream(text.split("[\\s\\p{Punct}&&[^'-]]+")) // –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞
                .map(word -> word.toLowerCase()) // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
                .filter(word -> !word.matches("[-']+")) // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ –¥–µ—Ñ—ñ—Å–∏ —Ç–∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∏
                .collect(Collectors.toCollection(TreeSet::new)); // –ó–±–∏—Ä–∞—î–º–æ –≤ TreeSet
    }
}
